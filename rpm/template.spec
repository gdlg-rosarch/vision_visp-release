Name:           ros-kinetic-visp-auto-tracker
Version:        0.9.2
Release:        0%{?dist}
Summary:        ROS visp_auto_tracker package

Group:          Development/Libraries
License:        GPLv2
URL:            http://wiki.ros.org/visp_auto_tracker
Source0:        %{name}-%{version}.tar.gz

Requires:       libdmtx-devel
Requires:       ros-kinetic-geometry-msgs
Requires:       ros-kinetic-message-filters
Requires:       ros-kinetic-resource-retriever
Requires:       ros-kinetic-roscpp
Requires:       ros-kinetic-sensor-msgs
Requires:       ros-kinetic-std-msgs
Requires:       ros-kinetic-visp
Requires:       ros-kinetic-visp-bridge
Requires:       ros-kinetic-visp-tracker
Requires:       zbar-devel
BuildRequires:  libdmtx-devel
BuildRequires:  ros-kinetic-catkin
BuildRequires:  ros-kinetic-geometry-msgs
BuildRequires:  ros-kinetic-message-filters
BuildRequires:  ros-kinetic-resource-retriever
BuildRequires:  ros-kinetic-roscpp
BuildRequires:  ros-kinetic-sensor-msgs
BuildRequires:  ros-kinetic-std-msgs
BuildRequires:  ros-kinetic-visp
BuildRequires:  ros-kinetic-visp-bridge
BuildRequires:  ros-kinetic-visp-tracker
BuildRequires:  zbar-devel

%description
Online automated pattern-based object tracker relying on visual servoing.
visp_auto_tracker wraps model-based trackers provided by ViSP visual servoing
library into a ROS package. The tracked object should have a QRcode of Flash
code pattern. Based on the pattern, the object is automaticaly detected. The
detection allows then to initialise the model-based trackers. When lost of
tracking achieves a new detection is performed that will be used to re-
initialize the tracker. This computer vision algorithm computes the pose (i.e.
position and orientation) of an object in an image. It is fast enough to allow
object online tracking using a camera.

%prep
%setup -q

%build
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/kinetic/setup.sh" ]; then . "/opt/ros/kinetic/setup.sh"; fi
mkdir -p obj-%{_target_platform} && cd obj-%{_target_platform}
%cmake .. \
        -UINCLUDE_INSTALL_DIR \
        -ULIB_INSTALL_DIR \
        -USYSCONF_INSTALL_DIR \
        -USHARE_INSTALL_PREFIX \
        -ULIB_SUFFIX \
        -DCMAKE_INSTALL_LIBDIR="lib" \
        -DCMAKE_INSTALL_PREFIX="/opt/ros/kinetic" \
        -DCMAKE_PREFIX_PATH="/opt/ros/kinetic" \
        -DSETUPTOOLS_DEB_LAYOUT=OFF \
        -DCATKIN_BUILD_BINARY_PACKAGE="1" \

make %{?_smp_mflags}

%install
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/kinetic/setup.sh" ]; then . "/opt/ros/kinetic/setup.sh"; fi
cd obj-%{_target_platform}
make %{?_smp_mflags} install DESTDIR=%{buildroot}

%files
/opt/ros/kinetic

%changelog
* Thu May 19 2016 Fabien Spindler <Fabien.Spindler@inria.fr> - 0.9.2-0
- Autogenerated by Bloom

* Mon Apr 18 2016 Fabien Spindler <Fabien.Spindler@inria.fr> - 0.9.1-0
- Autogenerated by Bloom

